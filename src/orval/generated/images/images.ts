/**
 * Generated by orval v6.23.0 üç∫
 * Do not edit manually.
 * StockPhoto API Documents
 * StockPhoto API „Éâ„Ç≠„É•„É°„É≥„Éà
 * OpenAPI spec version: 1.0
 */
import { useMutation } from '@tanstack/react-query'
import type {
  MutationFunction,
  UseMutationOptions,
} from '@tanstack/react-query'
import type { EchoHTTPError } from '../model/echoHTTPError'
import type { PostApiImagesUploadBody } from '../model/postApiImagesUploadBody'
import { customAxiosInstance } from '../../../lib/axios/init'
import type { ErrorType, BodyType } from '../../../lib/axios/init'

// eslint-disable-next-line
type SecondParameter<T extends (...args: any) => any> = T extends (
  config: any,
  args: infer P,
) => any
  ? P
  : never

/**
 * „É™„ÇØ„Ç®„Çπ„Éà„Åï„Çå„ÅüÁîªÂÉè„ÇíGCS„Å´„Ç¢„ÉÉ„Éó„É≠„Éº„Éâ„Åô„Çã
 * @summary ÁîªÂÉè„Ç¢„ÉÉ„Éó„É≠„Éº„Éâ
 */
export const postApiImagesUpload = (
  postApiImagesUploadBody: BodyType<PostApiImagesUploadBody>,
  options?: SecondParameter<typeof customAxiosInstance>,
) => {
  const formData = new FormData()
  formData.append('title', postApiImagesUploadBody.title)
  formData.append('file', postApiImagesUploadBody.file)

  return customAxiosInstance<void>(
    {
      url: `/api/images/upload`,
      method: 'POST',
      headers: { 'Content-Type': 'multipart/form-data' },
      data: formData,
    },
    options,
  )
}

export const getPostApiImagesUploadMutationOptions = <
  TError = ErrorType<EchoHTTPError>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiImagesUpload>>,
    TError,
    { data: BodyType<PostApiImagesUploadBody> },
    TContext
  >
  request?: SecondParameter<typeof customAxiosInstance>
}): UseMutationOptions<
  Awaited<ReturnType<typeof postApiImagesUpload>>,
  TError,
  { data: BodyType<PostApiImagesUploadBody> },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postApiImagesUpload>>,
    { data: BodyType<PostApiImagesUploadBody> }
  > = (props) => {
    const { data } = props ?? {}

    return postApiImagesUpload(data, requestOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type PostApiImagesUploadMutationResult = NonNullable<
  Awaited<ReturnType<typeof postApiImagesUpload>>
>
export type PostApiImagesUploadMutationBody = BodyType<PostApiImagesUploadBody>
export type PostApiImagesUploadMutationError = ErrorType<EchoHTTPError>

/**
 * @summary ÁîªÂÉè„Ç¢„ÉÉ„Éó„É≠„Éº„Éâ
 */
export const usePostApiImagesUpload = <
  TError = ErrorType<EchoHTTPError>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiImagesUpload>>,
    TError,
    { data: BodyType<PostApiImagesUploadBody> },
    TContext
  >
  request?: SecondParameter<typeof customAxiosInstance>
}) => {
  const mutationOptions = getPostApiImagesUploadMutationOptions(options)

  return useMutation(mutationOptions)
}
